import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.LinkedList;

public class ConnectionPool {
    private static ConnectionPool instance;
    private LinkedList<Connection> connections;

    // Private constructor to prevent instantiation from outside the class
    private ConnectionPool() {
        // Initialize the connection pool with some connections
        connections = new LinkedList<>();
        for (int i = 0; i < 10; i++) {
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydatabase", "user", "password");
                connections.add(connection);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Public method to get the instance of the class
    public static ConnectionPool getInstance() {
        if (instance == null) {
            instance = new ConnectionPool();
        }
        return instance;
    }

    // Get a connection from the pool
    public synchronized Connection getConnection() {
        if (connections.isEmpty()) {
            // Create a new connection if the pool is empty (in a real-world scenario, you might want to handle this more gracefully)
            try {
                return DriverManager.getConnection("jdbc:mysql://localhost:3306/mydatabase", "user", "password");
            } catch (SQLException e) {
                e.printStackTrace();
                return null;
            }
        } else {
            // Return an existing connection
            return connections.removeFirst();
        }
    }

    // Release a connection back to the pool
    public synchronized void releaseConnection(Connection connection) {
        connections.addLast(connection);
    }
}

public class DatabaseClient {
    public static void main(String[] args) {
        // Get the connection pool instance
        ConnectionPool connectionPool = ConnectionPool.getInstance();

        // Use connections from the pool
        Connection connection1 = connectionPool.getConnection();
        // ... perform database operations ...

        // Release the connection back to the pool when done
        connectionPool.releaseConnection(connection1);

        // Obtain another connection
        Connection connection2 = connectionPool.getConnection();
        // ... perform more database operations ...

        // Release the second connection back to the pool
        connectionPool.releaseConnection(connection2);
    }
}
